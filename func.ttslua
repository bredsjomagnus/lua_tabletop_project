local func = {}


function countvalues(t)

  if type(t) == "table" then
    local count = 0
    for k, v in pairs(t) do
      if v != nil then
        count = count + 1
      end
    end
  end




  return count


end

function func.updateHexControl(hex_units, hex_neighbours, hex_control, hex_town)

  -- en behållare för en funnen enhet
  local u = nil

  -- för varje hexagon på kartan kolla efter enheter
  for hex_guid, units in pairs(hex_units) do

    -- om finns det enheter på en hexagon
    if #units > 0 then



      -- utgångsläget är att en hexagon inte har zoc
      local zoc = false

      -- för var och en av enheterna på hexagonen
      for _, unit in pairs(units) do

        -- en behållare för enheten
        u = unit

        -- enhetens beskrivningstext
        local unit_desc = unit.getDescription()
        unit_desc = func.split(unit_desc, ":")

        -- kolla om enheten har zoc beroende på om
        -- enheten har [x] str på den sida som visas.
        if unit.is_face_down then
          zoc = unit_desc["zoc_2"]
        else
          zoc = unit_desc["zoc_1"]
        end

        -- kolla om en enhet som har [x] str uppåt
        -- är placerad in en stad, då det avgör zoc.
        if zoc == "false" and hex_town[hex_guid] then
          zoc = "true"
        end
      end

      if zoc == "true" then

        -- ta fram hexagonens grannar
        local hex_n = hex_neighbours[hex_guid]

        for i, n_hex_guid in pairs(hex_n) do
          local control = "A"
          if string.find(u.getName(), "German") then
            control = "G"
          end
          table.insert(hex_control[n_hex_guid], control)
        end

      end

    end

  end

  return hex_control
end

function func.updateHexUnits(hex_units)

  local allObjects = getAllObjects()
  local zone = nil
  if #allObjects > 0 then
    for k, v in pairs(allObjects) do
      if string.find(v.getName(), "unit") then
        local zones = v.getZones()
        if #zones > 0 then
          zone = zones[1]
          table.insert(hex_units[zone.guid], v)
          -- table.insert(hex_units[zone.guid], #hex_units[zone.guid] + 1, v)
        end

      end
    end
  end

  -- print("hex_units[c87b6d]")
  -- print(hex_units["c87b6d"])
  return hex_units
end





function tableHasKey(table,key)
    return table[key] ~= nil
end

function get_cost(terrain, edge, mp_type, actual_mp)

  if terrain == nil then
    return 100
  end

  -- if next_zoc then
  --   return actual_mp
  -- end

  if edge == "road" or edge == "bridge" then
    return 1
  end

  if mp_type == "inf" then
    if terrain == "clear" or terrain == "broken" or terrain == "woods" or terrain == "city" then
        return 1
    end

    if terrain == "forest" then
        return 2
    end
  end

  if mp_type == "mech" then
    if terrain == "clear" or terrain == "city" then
        return 1
    end

    if terrain == "broken" then
        return 2
    end

    if terrain == "woods" then
        return 3
    end

    if terrain == "forest" then
        return 4
    end
  end

end

-- TAR BORT WHITESPACE FRÅN s
function func.trim(s)
   return (s:gsub("^%s*(.-)%s*$", "%1"))
end

function func.split(inputstr, sep)
  -- funktion som skapar en table av en text där första radbrytningen
  -- är ny rad och den andra radbrytingen kommer via parametern 'sep'
    if sep == nil then
            sep = "%s"
    end
    local t={}
    local i = 0-- räknare i inre loopen
    local key = "" -- table key
    local value = "" -- table value

    -- första separatorn är ny rad
    for str in string.gmatch(inputstr, "([^\n]+)") do
      -- str är nu en rad i ryggsäckens beskrivning, ex 'Vatten: 1'

      -- Påbörjar ny räkning
      i = 0
      for t in string.gmatch(str, "([^"..sep.."]+)") do
        -- splittar upp str med 'sep' som separator

        -- det första värdet skall vara key
        -- det andra värdet skall vara value
        if i % 2 == 0 then
          key = t
        else
          value = t
        end
        i =  i + 1
      end
      -- print(key..": "..value)

      -- trimmar value och lägger till key: value par i tabellen
      -- value = trim(value)
      t[key] = value
    end
    return t
end

function contains(haystack, needle)
  for _, v in pairs(haystack) do
    if v == needle then
      return true
    end
  end
  return false
end


function isZOC(hex_control, hex, army)
    -- print("hexcontrol")
    -- print(hex_control["beccde"])
    if tableHasKey(hex_control, hex) then

      if #hex_control[hex] > 0 then
        if army == "allied" then
          return contains(hex_control[hex], "G")
        elseif army == "germany" then
          return contains(hex_control[hex], "A")
        end
      end



    end

end

function hasEnemies(hex_units, hex, army)

  -- print(hex_units["c87b6d"])
  -- print("hex: "..hex)
  -- print("hex_units: "..hex_units[hex])
  if tableHasKey(hex_control, hex) then

      if #hex_units[hex] > 0 then
        for k, v in pairs(hex_units[hex]) do
          if army == "allied" and string.find(v.getName(), "German") then
            return true
          elseif army == "germany" and string.find(v.getName(), "Allied") then
            return true
          end
        end
      end

    end

  return false
end



function func.dijkstra_search(start, mp, mp_type, unit_army, unit_name, color_tint, hex_units, hex_control)


  -- local mp = 2
  -- local mp_type = "inf"
  -- local unit_army = "allied"
  local dutt_color = {}
  if unit_army == "allied" then
    dutt_color = {(255 - (color_tint-1)*50)/255, (0 + (color_tint-1)*20)/255, (242 - (color_tint-1)*5)/255, 1}
  else
    dutt_color = {(240 - (color_tint-1)*40)/255, 67/255, (14 + (color_tint-1)*20)/255, 1}
  end


  local frontier = pqueue()
  frontier[start] = 0

  local came_from = {}
  came_from[start] = nil

  local cost_so_far = {}
  cost_so_far[start] = 0

  --print(frontier.min())

  while not frontier.empty() do
    local currentHex = frontier.min() -- hämtar den hexagon med minst kostnad
    frontier.remove(currentHex)
    --print(hex_neighbours[currentHex]) -- table med currentHex grannars hex_GUIDs
    for i, next in pairs(hex_neighbours[currentHex]) do
      if next then
        local actual_mp = mp

        local currentHex_zoc = isZOC(hex_control, currentHex, unit_army)
        local next_zoc = isZOC(hex_control, next, unit_army)
        local enemies = hasEnemies(hex_units, next, unit_army)
        -- local enemies = false
        local edge = hex_edges[currentHex][i]
        local next_cost = get_cost(hex_terrain[next], edge, mp_type, actual_mp, currentHex_zoc, next_zoc, enemies)



        local new_cost = cost_so_far[currentHex] + next_cost

        if next_zoc and new_cost < actual_mp then
          -- print("actual_mp: ", actual_mp)
          new_cost = actual_mp
        end

        if edge == "river" and new_cost < actual_mp then
          -- print("actual_mp: ", actual_mp)
          new_cost = actual_mp
        end



        if currentHex_zoc and not next_zoc then
          print(currentHex.." -> "..next)
          new_cost = new_cost + 1
        end

        if currentHex_zoc and next_zoc then
          -- print(currentHex.." -> "..next)
          new_cost = 100
        end

        if edge == "borderedge" then
          new_cost = 100
        end

        if enemies then
          new_cost = 100
        end

        if currentHex_zoc and next_zoc then
          new_cost = 100
        end

        -- if new_cost == 100 then
        --   print(currentHex.." -> "..next.. " cost: "..tostring(new_cost))
        -- end

        if not tableHasKey(cost_so_far, next) or new_cost < cost_so_far[next] then
          -- print("new_cost: ".. new_cost)
          -- print("next: "..next)
          -- print(cost_so_far[next])
          -- print(tableHasKey(cost_so_far, next))

          if new_cost <= actual_mp then
            -- print("new_cost: "..new_cost)
            -- print("actual_mp: "..actual_mp)
            cost_so_far[next] = new_cost
            table.insert(cost_so_far, {next = new_cost})
            local priority = new_cost
            frontier[next] = priority
            -- print(#cost_so_far)
            local zone = getObjectFromGUID(next)
            zone_pos = zone.getPosition()
            -- zone_pos.x = zone_pos.x - color_tint*0.98
            local dutt = spawnObject({type="BlockSquare", position=zone_pos, sound=false})
            dutt.setScale({0.2,0.2,0.2})
            dutt.setName("proxilidutt for "..unit_name.." "..new_cost)
            if next_zoc then
              dutt.setColorTint({0, 0, 0, 1})
            else
              dutt.setColorTint(dutt_color)
            end

            -- print(next)
          end

          -- print("cost_so_far["..next.."]: ".. cost_so_far[next])
          -- if new_cost < cost_so_far[next] then
          --
          -- end
        end



      end

      -- print(hex_edges[currentHex][i] .." -> ".. hex_terrain[next] .. " kostar ".. next_cost)
      -- print("Next cost: "..next_cost)
    end
  end

  -- print("COST_SO_FAR: "..#cost_so_far)
  -- for _, hex in ipairs(cost_so_far) do
  --   print(hex[0])
  -- end

end


function func.resetHexagons(hexagons)
  for k, v in pairs(hexagons) do
    hexagons[k] = {}
  end
end
return func
